sap.ui.define([
	"sap/ui/demo/cart/controller/BaseController",
	"sap/base/util/deepExtend",
	"sap/ui/core/syncStyleClass",
	"sap/ui/core/mvc/Controller",
	"sap/m/ObjectMarker",
	"sap/m/MessageToast",
	"sap/m/UploadCollectionParameter",
	"sap/m/library",
	"sap/ui/model/json/JSONModel",
	"sap/ui/core/format/FileSizeFormat",
	"sap/ui/Device",
	"sap/ui/demo/cart/model/formatter",
	"sap/m/Dialog"
], function(BaseController, deepExtend, syncStyleClass, Controller, ObjectMarker, MessageToast, UploadCollectionParameter, MobileLibrary, JSONModel, FileSizeFormat, Device, formatter, Dialog) {
	"use strict";
	var ListMode = MobileLibrary.ListMode,
	ListSeparators = MobileLibrary.ListSeparators;
	return BaseController.extend("sap.ui.demo.cart.controller.Camera", {
		formatter: formatter,

		onInit : function () {
			var oRouter = this.getOwnerComponent().getRouter();
			oRouter.getRoute("AddProduct").attachMatched(this._onRouteMatched, this);
		},
		_onRouteMatched : function(){
			 var that = this;
			 this._oLocalModel = this.getOwnerComponent().getModel("local");
			 this.lastTwoDisplay();
		},
		getAllItems: function(oGrid){
			var getSelectedItems = oGrid.getSelectedItems();
			var paths = [];
			for (var i = 0; i < getSelectedItems.length; i++) {
				paths.push(getSelectedItems[i].getBindingContext("local").getPath());
			}
			return paths;
		},
		takePhoto: function() {
			//This code was generated by the layout editor.
			var that = this;
			//Step 1: Create a popup object as a global variable
			this.fixedDialog = new Dialog({
				title: "Click on Capture to take photo",
				beginButton: new sap.m.Button({
					text: "Capture Photo",
					press: function(oEvent) {
						// TO DO: get the object of our video player which live camera stream is running
						//take the image object out of it and set to main page using global variable
						that.imageVal = document.getElementById("player");
						debugger;
						let imageCapture = new ImageCapture(that.stream.getVideoTracks()[0]);
						var that2 = that;
						imageCapture.takePhoto()
					  .then(blob => {
					    that2.imageContent = blob;
							var that3 = that2;
							var reader = new FileReader();
							var Stream = URL.createObjectURL(blob);
							reader.readAsDataURL(blob);
							reader.onloadend = function() {
									debugger;
									that3._allImages.push({
										"Stream": Stream,
										"Content": reader.result
									});
									that3.getModel("local").setProperty("/allImages", that3._allImages);
									that3.stream.getTracks().forEach(function(track) {
										track.stop();
									});
									that3.fixedDialog.close();
									that3.fixedDialog.destroy();
							}
					  })
					  .catch(error =>
							console.log(error)
						);

					}
				}),
				content: [
					new sap.ui.core.HTML({
						content: "<video id='player' autoplay></video>"
					})
				],
				endButton: new sap.m.Button({
					text: "Cancel",
					press: function() {
						that.stream.getTracks().forEach(function(track) {
						  track.stop();
						});
						that.fixedDialog.close();
						that.fixedDialog.destroy();
					}
				})
			});

			this.getView().addDependent(this.fixedDialog);
			//Step 2: Launch the popup
			this.fixedDialog.open();
			this.fixedDialog.attachBeforeClose(this.setImage, this);
			var handleSuccess = function(stream) {
				player.srcObject = stream;
				that.stream = stream;
			}
			navigator.mediaDevices.getUserMedia({
				video: true
			}).then(handleSuccess);
		},
		imageVal: "",
		onDelete: function(oEvent){
			var sPaths = this.getAllItems(oEvent.getSource().getParent().getParent());
			sPaths = this.reverseSort(sPaths,"allImages");
			var that = this;
			for (var i = 0; i < sPaths.length; i++) {
				var toBeDeleted = this.getView().getModel("local").getProperty(sPaths[i]);
				if(toBeDeleted.id){
					//To be deleted from server also
					if (toBeDeleted.id !== "") {
						that._deletedImages.push({id: toBeDeleted.id});
						that.checkChange = true;
					}
				}else{
					this.deleteImage(toBeDeleted.Stream);
				}
			}
			oEvent.getSource().getParent().getParent().removeSelections();
		},
		deleteImage: function (Stream) {
			var _allImages = this.getView().getModel("local").getProperty("/allImages");
			for (var j = 0; j < _allImages.length; j++) {
				if(_allImages[j].Stream === Stream){
					_allImages.splice(j,1);
					break;
				}
			}
			this.getView().getModel("local").setProperty("/allImages",_allImages);
		},

		onUploadChange: function(oEvent) {
			const files = oEvent.getParameter("files");
			var that = this;
			var allImages = this.getView().getModel("local").getProperty("/allImages");
			if (!files.length) {

			} else {
				for (let i = 0; i < files.length; i++) {
					//const img = document.createElement("img");
					var reader = new FileReader();
					reader.onload = function(e){
						var _allImages = that.getView().getModel("local").getProperty("/allImages");
						try {
							var vContent = e.currentTarget.result; //.result.replace("data:image/jpeg;base64,", "");
							for (var i = 0; i < _allImages.length; i++) {
								if(!_allImages[i].Content){
									_allImages[i].Content = vContent;
									that.checkChange = true;
									that.getView().getModel("local").setProperty("/allImages", _allImages);
									break;
								}
							}
						} catch (e) {

						}
					};
					var img = {
						"Stream": "",
						"Content": ""
					};
					img.Stream = URL.createObjectURL(files[i]);
					reader.readAsDataURL(files[i]);
					allImages.push(img);
					this.getView().getModel("local").setProperty("/allImages", allImages);
				}
			}
		},

		getRouter: function () {
			return sap.ui.core.UIComponent.getRouterFor(this);
		},
		_bindView : function (sObjectPath) {

		},
		_onBindingChange : function () {

		},
		onDeleteRow: function() {
			// debugger;
			var oItems = this.getView().byId("idTab").getSelectedItems();
			// var oSelContexts = this.getView().byId("idTab").getSelectedItems();
			// var aRows = this.getView().getModel("local").getProperty("/ProdWeights");
			// if (oItems.length === aRows.length) {
			// 	aRows.splice(0, aRows.length);
			// } else {
			// 	var nCount = 0;
			// 	for (var i = 0; i < oItems.length; i++) {
			// 		nCount = nCount + 1;
			// 		var sBindPath = oItems[i].getBindingContextPath();
			// 		var nIndex = sBindPath.split("/")[sBindPath.split("/").length - 1];
			// 		if (nCount > 1) {
			// 			nIndex = nIndex - 1;
			// 		}
			// 		aRows.splice(nIndex, 1);
			// 	}
			// }
			for (var i = 0; i < oItems.length; i++) {
				this.getView().byId("idTab").removeItem(oItems[i]);
			}

			// this.getView().getModel("local").getProperty("/ProdWeights",aRows);
			// this.getView().byId("idTab").removeSelections(true);
			MessageToast.show("Successfully Deleted");
			that.checkChange = true;
	},
		onInsert: function(oEvent) {
			var tunch = this._oLocalModel.getProperty("/Product/Tunch");
			var Wastage = this._oLocalModel.getProperty("/Product/Wastage");
			if ((tunch === "" && Wastage === "") || (tunch === "0" && Wastage === "0" ) || (tunch === 0 && Wastage === 0)){
				MessageToast.show("Please add Tunch First");
				return;
			}
			var props = this._prepModelInitialValues();
			var oModel = this.getView().getModel("local");
			var ProdWeights = oModel.getProperty("/ProdWeights");
			ProdWeights.push(props);
			oModel.setProperty("/ProdWeights", ProdWeights);
			that.checkChange = true;
		},
		onChange: function(oEvent) {

			var nVal = oEvent.getSource().getValue();
			var sPath = oEvent.getSource().getBindingContext("local").getPath();
			var nIndex = sPath.split("/")[sPath.split("/").length - 1];
			var oModel = this.getView().getModel("local");
			var tunch = oModel.getProperty("/Product/Tunch");
			var Wastage = oModel.getProperty("/Product/Wastage");
			tunch = parseFloat(tunch) + parseFloat(Wastage);
			var GrossWeight = oModel.getProperty("/ProdWeights/" + nIndex + "/GrossWeight");
			var LessWeight = oModel.getProperty("/ProdWeights/" + nIndex + "/LessWeight");
			// var NetWeight = oModel.getProperty("/ProdWeights/" + nIndex + "/NetWeight");
			var Quantity = oModel.getProperty("/ProdWeights/" + nIndex + "/Quantity");
			var OTRs =  oModel.getProperty("/ProdWeights/" + nIndex + "/OtherChrg");

			if (isNaN(nVal)) {
				nVal = 0;
			}
			if (isNaN(GrossWeight)) {
				GrossWeight = 0;
			}
			if (isNaN(LessWeight)) {
				LessWeight = 0;
			}

			// NetWeight
			nVal = GrossWeight - LessWeight;
			nVal = nVal.toFixed(3);
			oModel.setProperty("/ProdWeights/" + nIndex + "/NetWeight", nVal);

			//Fine
			nVal = nVal * Quantity;
			nVal = nVal * tunch / 100;
			oModel.setProperty("/ProdWeights/" + nIndex + "/Fine", nVal);
			nVal = 0;

			nVal = nVal + parseInt(OTRs);
			nVal = nVal.toFixed();
			oModel.setProperty("/ProdWeights/" + nIndex + "/Amount", nVal);
			that.checkChange = true;
		},

		_prepModelInitialValues: function() {

			return {
				"ProductId": "null",
		    "PairSize": 0,
		    "OtherChrg":0,
		    "GrossWeight": 0,
		    "LessWeight": 0,
		    "NetWeight": 0,
		    "Quantity": 1,
		    "Fine": 0,
		    "Amount": 0,
				"Values": [],
		    "Status": "A",
				"SoldOn": new Date(),
				"OrderId":"",
		    "Remarks":"null",
		    "CreatedOn": new Date(),
		    "CreatedBy": ""
			};
			// return props;
		}
	});
});
